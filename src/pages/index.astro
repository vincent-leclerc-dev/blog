---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Vincent Leclerc">
  <main class="bg-gradient-to-r from-green-400 to-blue-500">
    <h1>Vincent Leclerc</h1>
    <p>test</p>
    <div id="starfield" class="inset-0">
      <canvas
        id="canvas"
        style="width: 100%; height: 100%; padding: 0;margin: 0;"></canvas>
      <script>
        type Point = { x: number; y: number; z: number };

        const canvas = document.getElementById("canvas") as HTMLCanvasElement;
        const context = canvas.getContext("2d");

        let w: number;
        let h: number;

        const setCanvasExtents = () => {
          w = document.body.clientWidth;
          h = document.body.clientHeight;
          canvas.width = w;
          canvas.height = h;
        };

        setCanvasExtents();

        window.onresize = () => {
          setCanvasExtents();
        };

        const makeStars = (count: number): Point[] => {
          const out: Point[] = [];
          for (let i = 0; i < count; i++) {
            const s: Point = {
              x: Math.random() * 1600 - 800,
              y: Math.random() * 900 - 450,
              z: Math.random() * 1000,
            };
            if (s) {
              out.push(s);
            }
          }
          return out;
        };

        const stars: Point[] = makeStars(10000);

        const clear = () => {
          if (!context) {
            return;
          }
          context.fillStyle = "black";
          context.fillRect(0, 0, canvas.width, canvas.height);
        };

        const putPixel = (x: number, y: number, brightness: number) => {
          if (!context) {
            return;
          }

          const intensity = brightness * 255;
          const rgb =
            "rgb(" + intensity + "," + intensity + "," + intensity + ")";
          context.fillStyle = rgb;
          context.fillRect(x, y, 1, 1);
        };

        const moveStars = (distance: number) => {
          const count = stars.length;
          for (var i = 0; i < count; i++) {
            const s = stars[i];
            if (s) {
              s.z -= distance;
              while (s.z <= 1) {
                s.z += 1000;
              }
            }
          }
        };

        let prevTime: number;

        const init = (time: number) => {
          prevTime = time;
          requestAnimationFrame(tick);
        };

        const tick = (time: number) => {
          let elapsed = time - prevTime;
          prevTime = time;

          moveStars(elapsed * 0.03);

          clear();

          const cx = w / 2;
          const cy = h / 2;

          const count = stars.length;

          for (var i = 0; i < count; i++) {
            const star = stars[i];

            if (!star) {
              continue;
            }

            const x = cx + star.x / (star.z * 0.001);
            const y = cy + star.y / (star.z * 0.001);

            if (x < 0 || x >= w || y < 0 || y >= h) {
              continue;
            }

            const d = star.z / 1000.0;
            const b = 1 - d * d;

            putPixel(x, y, b);
          }

          requestAnimationFrame(tick);
        };

        requestAnimationFrame(init);
      </script>
    </div>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
