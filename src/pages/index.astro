---
import Layout from "../layouts/BaseLayout.astro";

const skills = ["HTML", "CSS", "PHP", "JS", "TS", "React", "Angular", "Vue"];

import BlogPost from "../components/BlogPost.astro";
const allPosts = await Astro.glob("../pages/posts/*.md");

const identity = {
  firstName: "Vincent",
  country: "France",
  occupation: "Full Stack Developer",
  hobbies: ["Escalade", "Batterie", "Astronomie", "Randonnée", "VTT"],
};

const projects = [
  {
    name: "Portfolio",
    description:
      "Vitrine de mes projets, ainsi que quelques informations sur moi.",
  },
  {
    name: "Presto Picto",
    description: "Application de bureau pour les Orthophonistes",
  },
];
---

<Layout title="Vincent Leclerc - Accueil">
  <main class="relative flex flex-col w-full h-full bg-softgrey z-20">
    <div
      class="relative container mx-auto flex flex-col bg-softgrey text-black font-semibold text-4xl text-center p-4"
    >
      <h1>WIP...</h1>
      <div id="posts" class="hidden">
        <ul>
          {
            allPosts.map((post) => (
              <BlogPost url={post.url} title={post.frontmatter.title} />
            ))
          }
        </ul>
      </div>
      <div id="skills" class="hidden">
        <h2>Skills</h2>
        <ul>
          {skills.map((skill) => <li>{skill}</li>)}
        </ul>
      </div>
      <div
        id="about"
        class="relative container mx-auto flex flex-col bg-softgrey text-black font-semibold text-4xl text-center p-4"
      >
        <h2>À propos</h2>
        <ul>
          <li>My name is {identity.firstName}.</li>
          <li>
            I live in {identity.country} and I work as a {identity.occupation}.
          </li>
          {
            identity.hobbies.length >= 2 && (
              <li>
                Two of my hobbies are: {identity.hobbies[0]} and{" "}
                {identity.hobbies[1]}
              </li>
            )
          }
        </ul>
      </div>
      <div id="projects">
        <h2>Mes derniers projets</h2>
        <ul>
          {projects.map((project) => <li>{project.name}</li>)}
        </ul>
      </div>
      <div class="w-full flex items-center justify-end">
        <a
          class="flex items-center justify-center rounded-full bg-blue-500 text-white h-[44px] w-[44px] m-4"
          href="#"
        >
          <img class="h-[30px] w-[30px]" alt="top" src="/rocket.svg" />
        </a>
      </div>
    </div>
  </main>
</Layout>

<script is:inline>
  const canvas = document.getElementById("canvas");
  const context = canvas.getContext("2d");

  let w;
  let h;

  const setCanvasExtents = () => {
    w = document.body.clientWidth;
    h = document.body.clientHeight;
    canvas.width = w;
    canvas.height = h;
  };

  setCanvasExtents();

  window.onresize = () => {
    setCanvasExtents();
  };

  const makeStars = (count) => {
    const out = [];
    for (let i = 0; i < count; i++) {
      const s = {
        x: Math.random() * 1600 - 800,
        y: Math.random() * 900 - 450,
        z: Math.random() * 1000,
      };
      if (s) {
        out.push(s);
      }
    }
    return out;
  };

  const stars = makeStars(10000);

  const clear = () => {
    if (!context) {
      return;
    }

    const gradient = context.createLinearGradient(
      0,
      0,
      canvas.width,
      canvas.height
    );

    gradient.addColorStop(0.2, "#000000");
    gradient.addColorStop(0.6, "#2a1683");
    gradient.addColorStop(0.68, "#5c0099");
    gradient.addColorStop(0.95, "#000000");
    context.fillStyle = gradient;
    context.fillRect(0, 0, canvas.width, canvas.height);
  };

  const putPixel = (x, y, brightness) => {
    if (!context) {
      return;
    }

    const intensity = brightness * 255;
    const rgb = "rgb(" + intensity + "," + intensity + "," + intensity + ")";
    context.fillStyle = rgb;
    context.fillRect(x, y, 1, 1);
  };

  const moveStars = (distance) => {
    const count = stars.length;
    for (var i = 0; i < count; i++) {
      const s = stars[i];
      if (s) {
        s.z -= distance;
        while (s.z <= 1) {
          s.z += 1000;
        }
      }
    }
  };

  let prevTime;

  const init = (time) => {
    prevTime = time;
    requestAnimationFrame(tick);
  };

  const tick = (time) => {
    let elapsed = time - prevTime;
    prevTime = time;

    moveStars(elapsed * 0.03);

    clear();

    const cx = w / 2;
    const cy = h / 2;

    const count = stars.length;

    for (var i = 0; i < count; i++) {
      const star = stars[i];

      if (!star) {
        continue;
      }

      const x = cx + star.x / (star.z * 0.001);
      const y = cy + star.y / (star.z * 0.001);

      if (x < 0 || x >= w || y < 0 || y >= h) {
        continue;
      }

      const d = star.z / 1000.0;
      const b = 1 - d * d;

      putPixel(x, y, b);
    }

    requestAnimationFrame(tick);
  };

  requestAnimationFrame(init);
</script>
