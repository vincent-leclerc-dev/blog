---
import { About } from "@/components/About";
import { Projects } from "@/components/Projects";
import { Tags } from "@/components/Tags";

import BlogPost from "../components/BlogPost.astro";
import { identity, projects, skills } from "../content";
import Layout from "../layouts/BaseLayout.astro";

const allPosts = await Astro.glob("../pages/posts/*.md");
---

<Layout title="Vincent Leclerc - Accueil">
  <div class="flex w-full flex-col bg-black">
    <div class="container m-auto bg-[#222222]">
      <h1
        class="text-center text-lg font-semibold text-white m-4 p-4 bg-yellow-600"
      >
        WIP...
      </h1>
      <div id="posts" class="hidden">
        <ul>
          {
            allPosts.map((post) => (
              <BlogPost url={post.url} title={post.frontmatter.title} />
            ))
          }
        </ul>
      </div>
      <div class="flex justify-evenly">
        <About data={identity} />
        <Tags data={skills} />
      </div>
      <div class="flex justify-evenly">
        <Projects data={projects} />
      </div>
      <div class="flex justify-end">
        <a
          class="m-4 flex h-[44px] w-[44px] items-center justify-center rounded-full bg-blue-500 text-white"
          href="#"
        >
          <img class="h-[30px] w-[30px]" alt="top" src="/rocket.svg" />
        </a>
      </div>
    </div>
  </div>
</Layout>

<script is:inline>
  navigator.sayswho = (function () {
    var ua = navigator.userAgent;
    console.log(ua);
    var tem;
    var M =
      ua.match(
        /(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i
      ) || [];
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return "IE " + (tem[1] || "");
    }
    if (M[1] === "Chrome") {
      tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
      if (tem != null) return tem.slice(1).join(" ").replace("OPR", "Opera");
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, "-?"];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
    return M.join(" ");
  })();

  window.addEventListener("load", (event) => {
    document.getElementById("browser").innerHTML = navigator.sayswho;
  });

  const canvas = document.getElementById("canvas");
  const context = canvas.getContext("2d", { alpha: false });
  context.mozImageSmoothingEnabled = false;
  context.imageSmoothingEnabled = false;

  let w;
  let h;

  const setCanvasExtents = () => {
    w = document.body.clientWidth;
    h = document.body.clientHeight;
    canvas.width = w;
    canvas.height = h;
  };

  setCanvasExtents();

  window.onresize = () => {
    setCanvasExtents();
  };

  const makeStars = (count) => {
    const out = [];
    for (let i = 0; i < count; i++) {
      const s = {
        x: Math.random() * 1600 - 800,
        y: Math.random() * 900 - 450,
        z: Math.random() * 1000,
      };
      if (s) {
        out.push(s);
      }
    }
    return out;
  };

  const stars = makeStars(10000);

  const clear = () => {
    if (!context) {
      return;
    }

    const gradient = context.createLinearGradient(
      0,
      0,
      canvas.width,
      canvas.height
    );

    gradient.addColorStop(0.2, "#000000");
    gradient.addColorStop(0.6, "#2a1683");
    gradient.addColorStop(0.68, "#5c0099");
    gradient.addColorStop(0.95, "#000000");
    context.fillStyle = gradient;
    context.fillRect(0, 0, canvas.width, canvas.height);
  };

  const putPixel = (x, y, brightness) => {
    if (!context) {
      return;
    }

    const intensity = brightness * 255;
    const rgb = "rgb(" + intensity + "," + intensity + "," + intensity + ")";
    context.fillStyle = rgb;
    context.fillRect(x, y, 1, 1);
  };

  const moveStars = (distance) => {
    const count = stars.length;
    for (var i = 0; i < count; i++) {
      const s = stars[i];
      if (s) {
        s.z -= distance;
        while (s.z <= 1) {
          s.z += 1000;
        }
      }
    }
  };

  let prevTime;

  const init = (time) => {
    prevTime = time;
    requestAnimationFrame(tick);
  };

  const tick = (time) => {
    let elapsed = time - prevTime;
    prevTime = time;

    moveStars(elapsed * 0.03);

    clear();

    const cx = w / 2;
    const cy = h / 2;

    const count = stars.length;

    for (var i = 0; i < count; i++) {
      const star = stars[i];

      if (!star) {
        continue;
      }

      const x = cx + star.x / (star.z * 0.001);
      const y = cy + star.y / (star.z * 0.001);

      if (x < 0 || x >= w || y < 0 || y >= h) {
        continue;
      }

      const d = star.z / 1000.0;
      const b = 1 - d * d;

      putPixel(x, y, b);
    }

    requestAnimationFrame(tick);
  };

  requestAnimationFrame(init);
</script>
